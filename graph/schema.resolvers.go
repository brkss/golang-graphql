package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"database/sql"

	db "github.com/brkss/golang-graphql/db/sqlc"
	"github.com/brkss/golang-graphql/graph/model"
	"github.com/google/uuid"
)

// CreateRecipeCategiory is the resolver for the CreateRecipeCategiory field.
func (r *mutationResolver) CreateRecipeCategiory(ctx context.Context, input *model.CreateRecipeCategoryInput) (*model.CreateCategoryResponse, error) {
	if input.Title == "" || input.Image == "" {
		err := "Invalid Data !"
		return &model.CreateCategoryResponse{
			Status:  false,
			Message: &err,
		}, nil
	}

	arg := db.CreateCategoryParams{
		ID:    uuid.New().String(),
		Title: input.Title,
		Image: input.Image,
		Active: sql.NullBool{
			Valid: true,
			Bool:  input.Active,
		},
	}

	category, err := r.Store.CreateCategory(ctx, arg)
	if err != nil {
		error := err.Error()
		return &model.CreateCategoryResponse{
			Status:  false,
			Message: &error,
		}, err
	}

	result := model.RecipeCategory{
		ID:     category.ID,
		Title:  category.Title,
		Image:  category.Image,
		Active: category.Active.Bool,
	}

	return &model.CreateCategoryResponse{
		Status:   true,
		Category: &result,
	}, nil
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (string, error) {
	return "Pong", nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.RecipeCategory, error) {
	categories, err := r.Store.GetCategories(ctx)
	if err != nil {
		return []*model.RecipeCategory{}, err 
	}
	var results []*model.RecipeCategory;
	for _, category := range categories {
		results = append(results, &model.RecipeCategory{
			ID: category.ID,
			Image: category.Image,
			Title: category.Title,
			Active: category.Active.Bool,
		})
	}
	return results, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
