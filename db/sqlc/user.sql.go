// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const getUserByIdent = `-- name: GetUserByIdent :one
SELECT id, name, email, username, password, created_at FROM users
WHERE 
email = $1 OR 
username = $1
LIMIT 1
`

func (q *Queries) GetUserByIdent(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdent, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users
( id, name, email, username, password )
VALUES ( $1, $2, $3, $4, $5 )
RETURNING id, name, email, username, password, created_at
`

type RegisterUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
